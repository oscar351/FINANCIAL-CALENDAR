datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum SharedCalendarPermission {
  READ
  WRITE
}

enum FinancialType {
  INCOME
  EXPENSE
}

enum NotificationType {
  CALENDAR_REMINDER
  BUDGET_WARNING
}

model Users {
  id                       Int                 @id @default(autoincrement())
  username                 String              @db.VarChar(255)
  email                    String              @db.VarChar(255)
  phoneNumber              String?             @db.VarChar(20)
  password                 String?             @db.VarChar(255)
  provider                 String              @db.VarChar(10)
  role                     Role                @default(USER)
  profile                  Profile?
  calendars                Calendar[]
  categories               CalendarCategory[]
  financials               Financial[]
  sharedCalendars          SharedCalendar[]
  notifications            Notification[]
  budgets                  Budget[]
  ownedFinancialCategories FinancialCategory[]

  @@unique([username, email, provider], name: "createProvider")
}

model Profile {
  id                Int     @id @default(autoincrement())
  user              Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int     @unique
  thumbnailImageUrl String? @db.Text
  profileImageUrl   String? @db.Text
}

model Calendar {
  id              Int                @id @default(autoincrement())
  title           String
  description     String
  user            Users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  startDate       DateTime
  endDate         DateTime
  categories      CalendarCategory[]
  sharedCalendars SharedCalendar[]
}

model CalendarCategory {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  color    String
  icon     String?
  user     Users?     @relation(fields: [userId], references: [id])
  userId   Int?
  Calendar Calendar[]
}

model SharedCalendar {
  id         Int                      @id @default(autoincrement())
  calendar   Calendar                 @relation(fields: [calendarId], references: [id])
  calendarId Int
  user       Users                    @relation(fields: [userId], references: [id])
  userId     Int
  permission SharedCalendarPermission

  @@unique([calendarId, userId]) // calendarId와 userId 조합으로 유니크 제약 조건 추가
}

model Financial {
  id          Int                @id @default(autoincrement())
  amount      Decimal
  type        FinancialType
  date        DateTime
  description String?
  user        Users              @relation(fields: [userId], references: [id])
  userId      Int
  category    FinancialCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  Attachment  Attachment[]
}

model Budget {
  id          Int               @id @default(autoincrement())
  user        Users             @relation(fields: [userId], references: [id])
  userId      Int
  category    FinancialCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  amount      Decimal
  periodStart DateTime
  periodEnd   DateTime
}

model Notification {
  id        Int              @id @default(autoincrement())
  user      Users            @relation(fields: [userId], references: [id])
  userId    Int
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  isRead    Boolean          @default(false)
}

model FinancialCategory {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  icon      String?
  user      Users?      @relation(fields: [userId], references: [id])
  userId    Int?
  Financial Financial[]
  Budget    Budget[]
}

model Attachment {
  id          Int       @id @default(autoincrement())
  financial   Financial @relation(fields: [financialId], references: [id])
  financialId Int
  filename    String
  url         String
}
